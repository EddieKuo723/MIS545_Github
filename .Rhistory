mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(watchersCountScaled =
((watchers_count - min(watchers_count))
/(max(watchers_count) - min(watchers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issueCountScaled, suscribersCountScaled,   isTarget
)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
set.seed(154)
sampleSet <- sample(nrow(githubStarMedian ),
round(nrow(githubStarMedian )*0.75),
replace = FALSE
)
# Put 75% sample into training
githubStarMedianTraining  <- githubStarMedian[sampleSet, ]
summary(githubStarMedianTraining)
# Put 25% sample into testing
githubStarMedianTesting  <- githubStarMedian[-sampleSet, ]
# Generate the Naive Bayes model to predict isTarget
# based on the other variables in the dataset
githubStarModel <- naiveBayes(formula = isTarget ~.,
data = githubStarMedianTraining,
lapse = 1)
# Build probabilities for each record in the testing dataset
# and store them in githubStarProbability
githubStarProbability <- predict(githubStarModel,
githubStarMedianTesting,
type = "raw")
# Display githubStarProbability on the console
print(githubStarProbability)
githubStarPrediction <- predict(githubStarModel,
githubStarMedianTesting,
type = "class")
# Display githubStarPrediction on the console
print(githubStarPrediction)
# Evaluate the model by forming a confusion matrix
githubStarConfusionMatrix <- table(githubStarMedianTesting$isTarget ,
githubStarPrediction)
# Display the confusion matrix on the console
print(githubStarConfusionMatrix)
# Calculate the model prediction accuracy
predictiveAccuracy <-sum(diag(githubStarConfusionMatrix)
/nrow(githubStarMedianTesting))
# Display the predictive accuracy on the console
print(predictiveAccuracy)
# Evaluate the model by forming a confusion matrix
githubStarConfusionMatrix <- table(githubStarMedianTesting$isTarget ,
githubStarPrediction)
# Display the confusion matrix on the console
print(githubStarConfusionMatrix)
# Evaluate the model by forming a confusion matrix
githubStarConfusionMatrix <- table(githubStarMedianTesting$isTarget ,
githubStarPrediction)
# Read Github_most_stars.csv into a tibble called githubStar
githubStar <- read_csv(file="Github_most_stars.csv",
col_types = "cccnnnnnncc",
col_names = TRUE)
# Display githubStar in the console
print(githubStar)
# Display the structure of githubStar in the console
# Display the summary of githubStar in the console
print(str(githubStar))
print(summary(githubStar))
githubStar <- githubStar %>%
mutate(starsScaled =
((stars - min(stars))
/(max(stars) - min(stars))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(forksCountScaled =
((forks_count - min(forks_count))
/(max(forks_count) - min(forks_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(networkCountScaled =
((network_count - min(network_count))
/(max(network_count) - min(network_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(watchersCountScaled =
((watchers_count - min(watchers_count))
/(max(watchers_count) - min(watchers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issueCountScaled, suscribersCountScaled,   isTarget
)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
print(summary(githubStarMedian))
# Read Github_most_stars.csv into a tibble called githubStar
githubStar <- read_csv(file="Github_most_stars.csv",
col_types = "cccnnnnnncc",
col_names = TRUE)
# Display githubStar in the console
print(githubStar)
# Display the structure of githubStar in the console
# Display the summary of githubStar in the console
print(str(githubStar))
print(summary(githubStar))
githubStar <- githubStar %>%
mutate(starsScaled =
((stars - min(stars))
/(max(stars) - min(stars))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(forksCountScaled =
((forks_count - min(forks_count))
/(max(forks_count) - min(forks_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issueCountScaled, suscribersCountScaled,   isTarget
)
set.seed(370)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
# removing non-finite values from the dataset
githubStarMedian <- githubStarMedian[!is.infinite(rowSums(githubStarMedian)),]
sampleSet <- sample(nrow(githubStarMedian),
round(nrow(githubStarMedian)*0.75),
replace = FALSE
)
# Put 75% sample into training
githubStarTraining  <- githubStarMedian[sampleSet, ]
# Put 25% sample into testing
githubStarTesting  <- githubStarMedian[-sampleSet, ]
# Generate the decision tree model to predict isTarget based
# on the other variables in the dataset. Use 0.01 as the complexity parameter.
githubStarModel <- rpart(formula = isTarget ~ .,
method = "class",
cp = 0.01,
data = githubStarTraining)
# Display the decision tree visualization in R
rpart.plot(githubStarModel)
# Predict classes for each record in the testing dataset
# and store them in githubStarPrediction
githubStarPrediction <- predict(githubStarModel,
githubStarTesting,
type = "class")
# Display riceFarmsPrediction on the console
print(githubStarPrediction)
# Evaluate the model by forming a confusion matrix
githubStarConfusionMatrix <- table(githubStarTesting$isTarget,
githubStarPrediction)
# Display the confusion matrix on the console
print(githubStarConfusionMatrix)
# Calculate the model prediction accuracy
predictiveAccuracy <-sum(diag(githubStarConfusionMatrix)
/nrow(githubStarTesting))
# Display the predictive accuracy on the console
print(predictiveAccuracy)
# Read Github_most_stars.csv into a tibble called githubStar
githubStar <- read_csv(file="Github_most_stars.csv",
col_types = "cccnnnnnncc",
col_names = TRUE)
# Display githubStar in the console
print(githubStar)
# Display the structure of githubStar in the console
# Display the summary of githubStar in the console
print(str(githubStar))
print(summary(githubStar))
githubStar <- githubStar %>%
mutate(starsScaled =
((stars - min(stars))
/(max(stars) - min(stars))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(forksCountScaled =
((forks_count - min(forks_count))
/(max(forks_count) - min(forks_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(networkCountScaled =
((network_count - min(network_count))
/(max(network_count) - min(network_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(watchersCountScaled =
((watchers_count - min(watchers_count))
/(max(watchers_count) - min(watchers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issueCountScaled, suscribersCountScaled,   isTarget
)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
# removing non-finite values from the dataset
githubStarMedian <- githubStarMedian[!is.infinite(rowSums(githubStarMedian)),]
set.seed(154)
sampleSet <- sample(nrow(githubStarMedian ),
round(nrow(githubStarMedian )*0.75),
replace = FALSE
)
# Put 75% sample into training
githubStarMedianTraining  <- githubStarMedian[sampleSet, ]
summary(githubStarMedianTraining)
# Put 25% sample into testing
githubStarMedianTesting  <- githubStarMedian[-sampleSet, ]
# Generate the Naive Bayes model to predict isTarget
# based on the other variables in the dataset
githubStarModel <- naiveBayes(formula = isTarget ~.,
data = githubStarMedianTraining,
lapse = 1)
# Build probabilities for each record in the testing dataset
# and store them in githubStarProbability
githubStarProbability <- predict(githubStarModel,
githubStarMedianTesting,
type = "raw")
# Display githubStarProbability on the console
print(githubStarProbability)
githubStarPrediction <- predict(githubStarModel,
githubStarMedianTesting,
type = "class")
# Display githubStarPrediction on the console
print(githubStarPrediction)
# Evaluate the model by forming a confusion matrix
githubStarConfusionMatrix <- table(githubStarMedianTesting$isTarget ,
githubStarPrediction)
# Display the confusion matrix on the console
print(githubStarConfusionMatrix)
# Calculate the model prediction accuracy
predictiveAccuracy <-sum(diag(githubStarConfusionMatrix)
/nrow(githubStarMedianTesting))
# Display the predictive accuracy on the console
print(predictiveAccuracy)
displayAllHistograms(githubStarMedian)
# Read Github_most_stars.csv into a tibble called githubStar
githubStar <- read_csv(file="Github_most_stars.csv",
col_types = "cccnnnnnncc",
col_names = TRUE)
# Display githubStar in the console
print(githubStar)
# Display the structure of githubStar in the console
# Display the summary of githubStar in the console
print(str(githubStar))
print(summary(githubStar))
githubStar <- githubStar %>%
mutate(starsScaled =
((stars - min(stars))
/(max(stars) - min(stars))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(forksCountScaled =
((forks_count - min(forks_count))
/(max(forks_count) - min(forks_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issue_count, suscribersCountScaled,   isTarget
)
displayAllHistograms <- function(tibbleDataset) {
tibbleDataset %>%
keep(is.numeric) %>%
gather() %>%
ggplot() + geom_histogram(mapping = aes(x=value, fill=key),
color = "black") +
facet_wrap (~key, scales = "free") +
theme_minimal ()
}
displayAllHistograms(githubStarMedian)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
# removing non-finite values from the dataset
githubStarMedian <- githubStarMedian[!is.infinite(rowSums(githubStarMedian)),]
displayAllHistograms(githubStarMedian)
# Read Github_most_stars.csv into a tibble called githubStar
githubStar <- read_csv(file="Github_most_stars.csv",
col_types = "cccnnnnnncc",
col_names = TRUE)
# Display githubStar in the console
print(githubStar)
# Display the structure of githubStar in the console
# Display the summary of githubStar in the console
print(str(githubStar))
print(summary(githubStar))
githubStar <- githubStar %>%
mutate(starsScaled =
((stars - min(stars))
/(max(stars) - min(stars))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(forksCountScaled =
((forks_count - min(forks_count))
/(max(forks_count) - min(forks_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(suscribersCountScaled =
((subscribers_count - min(subscribers_count))
/(max(subscribers_count) - min(subscribers_count))) * (1 - 0) + 0
)
githubStar <- githubStar %>%
mutate(issueCountScaled =
((issue_count - min(issue_count))
/(max(issue_count) - min(issue_count))) * (1 - 0) + 0
)
githubStarMedian <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2  ) >
median(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2 ),
TRUE,FALSE
)
)
githubStarMean <- githubStar%>%
mutate(isTarget =
ifelse(
(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2 + suscribersCountScaled * 0.2   ) >
mean(starsScaled * 0.3 + forksCountScaled * 0.3
+ issueCountScaled * 0.2  + suscribersCountScaled * 0.2  ),
TRUE,FALSE
)
)
print(summary(githubStarMean))
print(summary(githubStarMedian))
githubStarMedian <- githubStarMedian %>%
select( starsScaled, forksCountScaled,
issueCountScaled, suscribersCountScaled,   isTarget
)
displayAllHistograms <- function(tibbleDataset) {
tibbleDataset %>%
keep(is.numeric) %>%
gather() %>%
ggplot() + geom_histogram(mapping = aes(x=value, fill=key),
color = "black") +
facet_wrap (~key, scales = "free") +
theme_minimal ()
}
displayAllHistograms(githubStarMedian)
githubStarMedian$starsScaled <- log10(githubStarMedian$starsScaled)
githubStarMedian$forksCountScaled <- log10(githubStarMedian$forksCountScaled)
githubStarMedian$issueCountScaled <- log10(githubStarMedian$issueCountScaled)
githubStarMedian$suscribersCountScaled <- log10(githubStarMedian$suscribersCountScaled)
# removing non-finite values from the dataset
githubStarMedian <- githubStarMedian[!is.infinite(rowSums(githubStarMedian)),]
displayAllHistograms(githubStarMedian)
